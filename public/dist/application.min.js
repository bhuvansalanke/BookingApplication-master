"use strict";var ApplicationConfiguration=function(){var applicationModuleName="mean",applicationModuleVendorDependencies=["ngResource","ngAnimate","ngCookies","ui.router","ui.bootstrap","angularFileUpload","ui.calendar","GoogleCalendarService","EventUtil","ui.timepicker","ngMaterial","angularMoment","angular-input-stars"],registerModule=function(moduleName,dependencies){angular.module(moduleName,dependencies||[]),angular.module(applicationModuleName).requires.push(moduleName)};return{applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:applicationModuleVendorDependencies,registerModule:registerModule}}();angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider",function($locationProvider){$locationProvider.html5Mode(!0).hashPrefix("!")}]),angular.module(ApplicationConfiguration.applicationModuleName).run(["$rootScope","$state","Authentication",function($rootScope,$state,Authentication){$rootScope.$on("$stateChangeStart",function(event,toState,toParams,fromState,fromParams){if(toState.data&&toState.data.roles&&toState.data.roles.length>0){var allowed=!1;toState.data.roles.forEach(function(role){return void 0!==Authentication.user.roles&&-1!==Authentication.user.roles.indexOf(role)?(allowed=!0,!0):void 0}),allowed||(event.preventDefault(),$state.go("authentication.signin",{},{notify:!1}).then(function(){$rootScope.$broadcast("$stateChangeSuccess","authentication.signin",{},toState,toParams)}))}}),$rootScope.$on("$stateChangeSuccess",function(event,toState,toParams,fromState,fromParams){$state.previous={state:fromState,params:fromParams,href:$state.href(fromState,fromParams)}})}]),angular.element(document).ready(function(){"#_=_"===window.location.hash&&(window.location.hash="#!"),angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])}),ApplicationConfiguration.registerModule("core"),ApplicationConfiguration.registerModule("core.admin",["core"]),ApplicationConfiguration.registerModule("core.admin.routes",["ui.router"]),ApplicationConfiguration.registerModule("events"),ApplicationConfiguration.registerModule("personals"),ApplicationConfiguration.registerModule("users",["core"]),ApplicationConfiguration.registerModule("users.admin",["core.admin"]),ApplicationConfiguration.registerModule("users.admin.routes",["core.admin.routes"]),angular.module("core.admin").run(["Menus",function(Menus){Menus.addMenuItem("topbar",{title:"Admin",state:"admin",type:"dropdown",roles:["admin"]})}]),angular.module("core.admin.routes").config(["$stateProvider",function($stateProvider){$stateProvider.state("admin",{"abstract":!0,url:"/admin",template:"<ui-view/>",data:{roles:["admin"]}})}]),angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise("not-found"),$stateProvider.state("home",{url:"/",templateUrl:"modules/core/views/home.client.view.html"}).state("booknow",{url:"/booknow",templateUrl:"modules/core/views/book.client.view.html"}).state("booklast",{url:"/booklast",templateUrl:"modules/core/views/book-last.client.view.html"}).state("not-found",{url:"/not-found",templateUrl:"modules/core/views/404.client.view.html"})}]);var coreApp=angular.module("core");coreApp.controller("BookController",["$scope","prsnlService",function($scope,prsnlService){$scope.dentist=prsnlService.getDentist(),$scope.treatment=prsnlService.getTreatment()}]),angular.module("core").controller("HeaderController",["$scope","$state","Authentication","Menus",function($scope,$state,Authentication,Menus){$scope.$state=$state,$scope.authentication=Authentication,$scope.menu=Menus.getMenu("topbar"),$scope.isCollapsed=!1,$scope.toggleCollapsibleMenu=function(){$scope.isCollapsed=!$scope.isCollapsed},$scope.$on("$stateChangeSuccess",function(){$scope.isCollapsed=!1})}]),angular.module("core").controller("HomeController",["$scope","$location","$controller","$timeout","$q","Personals","ApptTypes","prsnlService",function($scope,$location,$controller,$timeout,$q,Personals,ApptTypes,prsnlService){function queryPrsnlSearch(query){var results=query?prsnl.personals.filter(createFilterFor(query)):prsnl.personals,deferred=$q.defer();return $timeout(function(){deferred.resolve(results)},1e3*Math.random(),!1),deferred.promise}function createFilterFor(query){var lowercaseQuery=angular.lowercase(query);return function(personal){return 0===angular.lowercase(personal.fName).indexOf(lowercaseQuery)}}function selectedPrsnlChange(item){item?appt.apptTypes=item.treatments:appt.apptTypes=ApptTypes.query()}function queryApptSearch(query){var results=query?appt.apptTypes.filter(createFilterForAppt(query)):appt.apptTypes,deferred=$q.defer();return $timeout(function(){deferred.resolve(results)},1e3*Math.random(),!1),deferred.promise}function createFilterForAppt(query){var lowercaseQuery=angular.lowercase(query);return function(apptType){return 0===angular.lowercase(apptType.description).indexOf(lowercaseQuery)}}function selectedApptChange(item){item?prsnl.personals=queryPrsnlSearchBy(item.description):prsnl.personals=Personals.query()}function queryPrsnlSearchBy(query){var results=query?prsnl.personalsAll.filter(createFilterByTreatment(query)):prsnl.personalsAll,deferred=$q.defer();return $timeout(function(){deferred.resolve(results)},1e3*Math.random(),!1),deferred.promise}function createFilterByTreatment(query){return function(personal){if(personal){var result=!1;return angular.forEach(personal.treatments,function(value,key){0===value.description.indexOf(query)&&(result=!0)}),result}}}$scope.go=function(path){$location.path(path)},$scope.nextPage=function(){prsnlService.addDentist(prsnl.selectedPrsnl),prsnlService.addTreatment(appt.selectedAppt),prsnl.selectedPrsnl&&appt.selectedAppt?$location.path("/booklast"):alert("Please select both Treatment & Doctor")},$scope.data={selectedIndex:0,bottom:!1};var prsnl=this;prsnl.personals=Personals.query(),prsnl.personalsAll=prsnl.personals,prsnl.selectedPrsnl=null,prsnl.searchPrsnl=null,prsnl.simulateQuery=!1,prsnl.isDisabled=!1,prsnl.queryPrsnlSearch=queryPrsnlSearch,prsnl.selectedPrsnlChange=selectedPrsnlChange;var appt=this;appt.apptTypes=ApptTypes.query(),appt.selectedAppt=null,appt.searchAppt=null,appt.queryApptSearch=queryApptSearch,appt.selectedApptChange=selectedApptChange}]),angular.module("core").service("Menus",[function(){this.defaultRoles=["*"],this.menus={};var shouldRender=function(user){if(!user)return this.isPublic;if(~this.roles.indexOf("*"))return!0;for(var userRoleIndex in user.roles)for(var roleIndex in this.roles)if(this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1};this.validateMenuExistance=function(menuId){if(menuId&&menuId.length){if(this.menus[menuId])return!0;throw new Error("Menu does not exist")}throw new Error("MenuId was not provided")},this.getMenu=function(menuId){return this.validateMenuExistance(menuId),this.menus[menuId]},this.addMenu=function(menuId,options){return options=options||{},this.menus[menuId]={isPublic:null===options.isPublic||"undefined"==typeof options.isPublic?!0:options.isPublic,roles:options.roles||this.defaultRoles,items:options.items||[],shouldRender:shouldRender},this.menus[menuId]},this.removeMenu=function(menuId){this.validateMenuExistance(menuId),delete this.menus[menuId]},this.addMenuItem=function(menuId,options){if(options=options||{},this.validateMenuExistance(menuId),this.menus[menuId].items.push({title:options.title||"",state:options.state||"",type:options.type||"item","class":options["class"],isPublic:null===options.isPublic||"undefined"==typeof options.isPublic?this.menus[menuId].isPublic:options.isPublic,roles:null===options.roles||"undefined"==typeof options.roles?this.menus[menuId].roles:options.roles,position:options.position||0,items:[],shouldRender:shouldRender}),options.items)for(var i in options.items)this.addSubMenuItem(menuId,options.link,options.items[i]);return this.menus[menuId]},this.addSubMenuItem=function(menuId,parentItemState,options){options=options||{},this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].state===parentItemState&&this.menus[menuId].items[itemIndex].items.push({title:options.title||"",state:options.state||"",isPublic:null===options.isPublic||"undefined"==typeof options.isPublic?this.menus[menuId].items[itemIndex].isPublic:options.isPublic,roles:null===options.roles||"undefined"==typeof options.roles?this.menus[menuId].items[itemIndex].roles:options.roles,position:options.position||0,shouldRender:shouldRender});return this.menus[menuId]},this.removeMenuItem=function(menuId,menuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===menuItemURL&&this.menus[menuId].items.splice(itemIndex,1);return this.menus[menuId]},this.removeSubMenuItem=function(menuId,submenuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)for(var subitemIndex in this.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items[subitemIndex].link===submenuItemURL&&this.menus[menuId].items[itemIndex].items.splice(subitemIndex,1);return this.menus[menuId]},this.addMenu("topbar",{isPublic:!1})}]);var coreApp=angular.module("core");coreApp.factory("prsnlService",function(){var selectedDentist=[],selectedTreatment=[],addDentist=function(dentist){selectedDentist=dentist},addTreatment=function(treatment){selectedTreatment=treatment},getDentist=function(){return selectedDentist},getTreatment=function(){return selectedTreatment};return{addDentist:addDentist,getDentist:getDentist,selectedDentist:selectedDentist,addTreatment:addTreatment,getTreatment:getTreatment,selectedTreatment:selectedTreatment}}),angular.module("core").service("Socket",["Authentication","$state","$timeout",function(Authentication,$state,$timeout){this.connect=function(){Authentication.user&&(this.socket=io())},this.connect(),this.on=function(eventName,callback){this.socket&&this.socket.on(eventName,function(data){$timeout(function(){callback(data)})})},this.emit=function(eventName,data){this.socket&&this.socket.emit(eventName,data)},this.removeListener=function(eventName){this.socket&&this.socket.removeListener(eventName)}}]),angular.module("events").run(["Menus",function(Menus){Menus.addMenuItem("topbar",{title:"Appointments",state:"events.main"})}]),angular.module("events").config(["$stateProvider",function($stateProvider){$stateProvider.state("events",{"abstract":!0,url:"/events",template:"<ui-view/>",data:{roles:["user","admin"]}}).state("events.main",{url:"/main",templateUrl:"modules/events/views/events.client.view.html"}).state("events.list",{templateUrl:"modules/events/views/list-events.client.view.html"}).state("events.calendar",{templateUrl:"modules/events/views/calendar-events.client.view.html"}).state("events.create",{url:"/createappointment",templateUrl:"modules/events/views/create-events.client.view.html"})}]);var eventCreateApp=angular.module("events");eventCreateApp.controller("EventsCreateController",["$scope","$googleCalendar","$location","$log","$filter","$compile","prsnlService","$mdDialog","$mdMedia",function($scope,$googleCalendar,$location,$log,$filter,$compile,prsnlService,$mdDialog,$mdMedia){function DialogController($scope,$mdDialog,prsnlService){$scope.hide=function(){$mdDialog.hide()},$scope.cancel=function(){$mdDialog.cancel()},$scope.answer=function(answer){$mdDialog.hide(answer)},$scope.selectedDentist=prsnlService.getDentist(),$scope.selectedTreatment=prsnlService.getTreatment()}$scope.events=[],this.selectedDentist=prsnlService.getDentist(),this.selectedTreatment=prsnlService.getTreatment(),$scope.myDate=new Date,$scope.minDate=new Date,$scope.maxDate=new Date($scope.myDate.getFullYear(),$scope.myDate.getMonth()+2,$scope.myDate.getDate()),$.datepicker.setDefaults({showOn:"both",buttonImageOnly:!0,buttonImage:"calendar.gif",buttonText:"Calendar"}),this.addEvent=function(){console.log("Start Time:",$scope.event.startTime);var time=$scope.event.startTime.match(/(\d+)(?::(\d\d))?\s*(p?)/);$scope.event.startDate.setHours(parseInt(time[1])+(time[3]?12:0)),$scope.event.startDate.setMinutes(parseInt(time[2])||0),console.log("Start Date:",$scope.event.startDate);var endDate=new Date($scope.event.startDate);endDate.setMinutes(endDate.getMinutes()+this.selectedTreatment.duration),console.log("End Date:",endDate),$scope.patientInfo={patientName:$scope.event.patientName,contact:$scope.event.patientPhoneNumber,emailId:$scope.event.patientEmail},$googleCalendar.addEvent($scope.event.startDate,endDate,this.selectedDentist,$scope.patientInfo).then(function(result){console.log("Add Event Result:",result),$scope.showSuccess()},function(result){$scope.showFailed()})},this.updateTime=function(){$scope.notavailable="";var _date=$filter("date")(new Date($scope.event.startDate),"EEEE");$("#timePick .time").timepicker("remove");for(var index=0;index<this.selectedDentist.slots.length;index++){var slot=this.selectedDentist.slots[index];slot.day===_date?($scope.event.minTime=$filter("date")(new Date(slot.starttime),"shortTime"),$scope.event.maxTime=$filter("date")(new Date(slot.endtime),"shortTime"),$("#timePick .time").timepicker({minTime:$filter("date")(new Date(slot.starttime),"shortTime"),maxTime:$filter("date")(new Date(slot.endtime),"shortTime"),showDuration:!0,step:this.selectedTreatment.duration,disableTextInput:!0,timeFormat:"H:i"})):$scope.notavailable="No Slots Available for the selected date"}},DialogController.$inject=["$scope","$mdDialog","prsnlService"],$scope.showFailed=function(){var useFullScreen=($mdMedia("sm")||$mdMedia("xs"))&&$scope.customFullscreen;$mdDialog.show({controller:DialogController,templateUrl:"modules/events/views/failed.tmpl.html",parent:angular.element(document.body),clickOutsideToClose:!0,fullscreen:useFullScreen}).then(function(answer){$location.path("/")},function(){$location.path("/")}),$scope.$watch(function(){return $mdMedia("xs")||$mdMedia("sm")},function(wantsFullScreen){$scope.customFullscreen=wantsFullScreen===!0})},$scope.showSuccess=function(){var useFullScreen=($mdMedia("sm")||$mdMedia("xs"))&&$scope.customFullscreen;$mdDialog.show({controller:DialogController,templateUrl:"modules/events/views/success.tmpl.html",parent:angular.element(document.body),clickOutsideToClose:!0,fullscreen:useFullScreen}).then(function(answer){$location.path("/")},function(){$location.path("/")}),$scope.$watch(function(){return $mdMedia("xs")||$mdMedia("sm")},function(wantsFullScreen){$scope.customFullscreen=wantsFullScreen===!0})}}]);var eventsApp=angular.module("events");eventsApp.controller("EventsController",["$scope","$googleCalendar","$uibModal","$log","$mdSidenav",function($scope,$googleCalendar,$uibModal,$log,$mdSidenav){$scope.events=[],$scope.calEvents=[],$scope.eventSources=[],$scope.isCalendarView=!0,$scope.isTableView=!1,$scope.isSidenavOpen=!1,$scope.uiConfig={calendar:{editable:!1,stick:!0,header:{left:"month,agendaWeek,agendaDay",center:"title",right:"today prev,next"},eventClick:$scope.alertOnEventClick,eventDrop:$scope.alertOnDrop,eventResize:$scope.alertOnResize}},this.toggleview=function(){$scope.isCalendarView===!0?($scope.isCalendarView=!1,$scope.isTableView=!0):($scope.isCalendarView=!0,$scope.isTableView=!1)},$scope.alertOnEventClick=function(date,jsEvent,view){$scope.currentEvent=date,$mdSidenav("right").toggle()},$scope.getEvents=function(){$googleCalendar.getEvents().then(function(events){$scope.events=events;for(var index=0;index<events.length;index++){var event=events[index];$scope.calEvents[index]={title:event.summary,start:event.start.dateTime,end:event.end.dateTime,description:event.description}}})},$scope.getEvents(),$scope.eventSources=[$scope.calEvents],$scope.setCurrentEvent=function(event){$scope.currentEvent=event}}]),angular.module("EventUtil",[]).factory("broadcast",["$rootScope",function($rootScope){return function(eventName,payload){$rootScope.$broadcast(eventName,payload)}}]).factory("listenTo",["$rootScope",function($rootScope){return function(eventName,listener){$rootScope.$on(eventName,listener)}}]),angular.module("GoogleCalendarService",[],["$provide",function($provide){$provide.factory("$googleCalendar",["$http","$q","$location",function($http,$q,$location){var $scope=angular.element(document).scope(),baseUrl=$location.protocol()+"://"+location.host;return{load:function(){var defer=$q.defer();return $http.get(baseUrl+"/api/loadprofile").then(function(response){200===response.status?($scope.$broadcast("GoogleEventsReceived",response.data.items),defer.resolve(response.data.items)):($scope.$broadcast("GoogleError",response.data),defer.reject(response.data))}),defer.promise},getEvents:function(){var defer=$q.defer();return $http.get(baseUrl+"/api/events").then(function(response){200===response.status?($scope.$broadcast("GoogleEventsReceived",response.data.items),defer.resolve(response.data.items),console.log(response.data.items)):($scope.$broadcast("GoogleError",response.data),defer.reject(response.data))}),defer.promise},addEvent:function(scheduledDate,endDate,contactInfo,patientInfo){var defer=$q.defer(),postData={startdate:scheduledDate,enddate:endDate,contact:contactInfo,patient:patientInfo};return $http.post(baseUrl+"/api/events",postData,{"Content-Type":"application/json"}).then(function(response){200===response.status?($scope.$broadcast("eventAddedSuccess",response.data),defer.resolve(response.data)):(console.log(response.data),$scope.$broadcast("GoogleError",response.data),defer.reject(response.data))},function(response){console.log(response.data),$scope.$broadcast("GoogleError",response.data),defer.reject(response.data)}),defer.promise}}}])}]),angular.module("personals").run(["Menus",function(Menus){Menus.addMenuItem("topbar",{title:"Configuration",state:"personals",type:"dropdown",roles:["user"]}),Menus.addSubMenuItem("topbar","personals",{title:"Employees",state:"personals.list"}),Menus.addSubMenuItem("topbar","personals",{title:"Appointment Types",state:"personals.appttypelist"})}]),angular.module("personals").config(["$stateProvider",function($stateProvider){$stateProvider.state("personals",{"abstract":!0,url:"/personals",template:"<ui-view/>",data:{roles:["user","admin"]}}).state("personals.list",{url:"",templateUrl:"modules/personals/views/list-personals.client.view.html"}).state("personals.appttypelist",{url:"/appointmenttypes",templateUrl:"modules/personals/views/list-appttypes.client.view.html"})}]);var personalsApp=angular.module("personals");personalsApp.controller("ApptSlotController",["$scope","slotService",function($scope,slotService){$scope.slotList=slotService.slotList,$scope.slot=[],$scope.disabled=!1,$scope.dayOptions=[{label:"Monday"},{label:"Tuesday"},{label:"Wednesday"},{label:"Thursday"},{label:"Friday"},{label:"Saturday"},{label:"Sunday"}];var refresh=function(personal){console.log(personal),slotService.slotList=personal.slots,$scope.slot="",$scope.disabled=!1};$scope.addSlots=function(){console.log(slotService.slotList),slotService.slotList.push({day:$scope.slot.selectedDay.label,location:$scope.slot.location,starttime:$scope.slot.starttime,endtime:$scope.slot.endtime}),$scope.slotList=slotService.slotList},$scope.remove=function(personal,slot){if(slot)for(var i in this.slotList)this.slotList[i]===slot&&this.slotList.splice(i,1);else this.slot.$remove(function(){})},$scope.update=function(personal){personal.slots=[];for(var index=0;index<slotService.slotList.length;index++)personal.slots.push({day:slotService.slotList[index].day,starttime:slotService.slotList[index].starttime,endtime:slotService.slotList[index].endtime,location:slotService.slotList[index].location});personal.$update(function(){refresh(personal)},function(errorResponse){$scope.error=errorResponse.data.message,console.log(errorResponse.data.message)})},$scope.edit=function(slot){for(var i in this.slotList)this.slotList[i]===slot&&($scope.slot=slot);$scope.disabled=!0},$scope.deselect=function(){$scope.slot="",$scope.disabled=!1}}]);var personalsApp=angular.module("personals");personalsApp.controller("ApptTypeController",["$scope","ApptTypes",function($scope,ApptTypes){$scope.procedureList=[],$scope.procedure=[],$scope.disabled=!1;var refresh=function(){$scope.procedureList=ApptTypes.query(),$scope.procedure="",$scope.disabled=!1};refresh(),$scope.addProcedure=function(){var apptType=new ApptTypes({description:$scope.procedure.description,duration:$scope.procedure.duration,price:$scope.procedure.price});apptType.$save(function(response){$scope.procedure.description="",$scope.procedure.duration="",$scope.procedure.price="",refresh()},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(procedure){if(confirm("Are you sure you want to delete this procedure?"))if(procedure){procedure.$remove();for(var i in this.procedureList)this.procedureList[i]===procedure&&this.procedureList.splice(i,1)}else this.procedure.$remove(function(){})},$scope.update=function(updtprocedure){var procedure=updtprocedure;procedure.$update(function(){refresh()},function(errorResponse){$scope.error=errorResponse.data.message,console.log(errorResponse.data.message)})},$scope.edit=function(procedure){for(var i in this.procedureList)this.procedureList[i]===procedure&&($scope.procedure=procedure);$scope.disabled=!0},$scope.deselect=function(){$scope.procedure="",$scope.disabled=!1}}]);var personalsApp=angular.module("personals");personalsApp.controller("PersonalsCreateController",["$scope","Personals","Notify",function($scope,Personals,Notify){this.CreatePrsnl=function(){var personal=new Personals({fName:this.fName,lName:this.lName,emailId:this.emailId,contact:this.contact,isConsultant:this.isConsultant,speciality:this.speciality,qualification:this.qualification,experience:this.experience,rating:this.rating,treatments:this.selectedTreatments,slots:this.slots});personal.$save(function(response){$scope.fName="",$scope.lName="",$scope.emailId="",$scope.contact="",$scope.isConsultant="",$scope.speciality="",$scope.qualification="",$scope.selectedTreatments=null,$scope.slots=null,$scope.experience=null,$scope.rating=null,Notify.sendMsg("NewPersonal",{id:response._id})},function(errorResponse){$scope.error=errorResponse.data.message})}}]);var personalsApp=angular.module("personals");personalsApp.controller("PersonalsUpdateController",["$scope",function($scope){this.rating=1,this.rateFunction=function(rating){alert("Rating selected - "+rating)},this.UpdatePrsnl=function(updtpersonal){var personal=updtpersonal;personal.$update(function(){},function(errorResponse){$scope.error=errorResponse.data.message,console.log(errorResponse.data.message)})}}]);var personalsApp=angular.module("personals");personalsApp.controller("PersonalsController",["$scope","$stateParams","Personals","$uibModal","$log","$q","slotService",function($scope,$stateParams,Personals,$uibModal,$log,$q,slotService){this.personals=Personals.query(),console.log(this.personals),this.modelCreate=function(size){var modalInstance=$uibModal.open({animation:$scope.animationsEnabled,templateUrl:"modules/personals/views/create-personal.client.view.html",controller:function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close($scope.personal)},$scope.cancel=function(){$uibModalInstance.dismiss("cancel")}},size:size});modalInstance.result.then(function(selectedItem){$scope.selected=selectedItem},function(){$log.info("Modal dismissed at: "+new Date)})},this.modelUpdate=function(size,selectedPersonal){for(var elements=[],index=0;index<selectedPersonal.treatments.length;index++){var element=selectedPersonal.treatments[index];elements[index]={description:element.description,duration:element.duration,price:element.price,checked:!0}}selectedPersonal.treatments=elements,console.log(selectedPersonal);var modalInstance=$uibModal.open({animation:$scope.animationsEnabled,templateUrl:"modules/personals/views/edit-personal.client.view.html",controller:function($scope,$uibModalInstance,selectedPersonal){$scope.personal=selectedPersonal,$scope.ok=function(){$uibModalInstance.close($scope.personal)},$scope.cancel=function(){$uibModalInstance.dismiss("cancel")}},size:size,resolve:{selectedPersonal:function(){return selectedPersonal}}});modalInstance.result.then(function(selectedItem){$scope.selected=selectedItem},function(){})},this.modelSchedule=function(size,selectedPersonal){var modalInstance=$uibModal.open({animation:$scope.animationsEnabled,templateUrl:"modules/personals/views/list-apptslots.client.view.html",controller:function($scope,$uibModalInstance,selectedPersonal,slotService){$scope.personal=selectedPersonal,slotService.slotList=selectedPersonal.slots,$scope.ok=function(){$uibModalInstance.close($scope.personal)},$scope.cancel=function(){$uibModalInstance.dismiss("cancel")}},size:size,resolve:{selectedPersonal:function(){return selectedPersonal}}});modalInstance.result.then(function(selectedItem){$scope.selected=selectedItem},function(){})},this.remove=function(personal){if(confirm("Are you sure you want to delete this user?"))if(personal){personal.$remove();for(var i in this.personals)this.personals[i]===personal&&this.personals.splice(i,1)}else this.personal.$remove(function(){})}}]);var personalsApp=angular.module("personals");personalsApp.directive("listPersonal",["Personals","Notify",function(Personals,Notify){return{restrict:"E",transclude:!0,templateUrl:"modules/personals/views/view-personal.client.view.html",link:function($scope,element,attrs){Notify.getMsg("NewPersonal",function(event,data){$scope.personalsCtrl.personals=Personals.query()})}}}]);var personalsApp=angular.module("personals");personalsApp.factory("slotService",function(){var slotList=[],addSlot=function(newObj){slotList.push(newObj)},getSlots=function(){return slotList};return{addSlot:addSlot,getSlots:getSlots,slotList:slotList}}),angular.module("personals").factory("Personals",["$resource",function($resource){return $resource("api/personals/:personalId",{personalId:"@_id"},{update:{method:"PUT"}})}]).factory("ApptTypes",["$resource",function($resource){return $resource("api/appttypes/:appttypeId",{appttypeId:"@_id"},{update:{method:"PUT"}})}]).factory("Notify",["$rootScope",function($rootScope){var notify={};return notify.sendMsg=function(msg,data){data=data||{},$rootScope.$emit(msg,data),console.log("message sent!")},notify.getMsg=function(msg,func,scope){var unbind=$rootScope.$on(msg,func);scope&&scope.$on("destroy",unbind)},notify}]),angular.module("users.admin").run(["Menus",function(Menus){Menus.addSubMenuItem("topbar","admin",{title:"Manage Users",state:"admin.users"})}]),angular.module("users.admin.routes").config(["$stateProvider",function($stateProvider){$stateProvider.state("admin.users",{url:"/users",templateUrl:"modules/users/views/admin/user-list.client.view.html",controller:"UserListController"}).state("admin.user",{url:"/users/:userId",templateUrl:"modules/users/views/admin/user.client.view.html",controller:"UserController",resolve:{userResolve:["$stateParams","Admin",function($stateParams,Admin){return Admin.get({userId:$stateParams.userId})}]}}).state("admin.user-edit",{url:"/users/:userId/edit",templateUrl:"modules/users/views/admin/user-edit.client.view.html",controller:"UserController",resolve:{userResolve:["$stateParams","Admin",function($stateParams,Admin){return Admin.get({userId:$stateParams.userId})}]}})}]),angular.module("users").config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push(["$q","$location","Authentication",function($q,$location,Authentication){return{responseError:function(rejection){switch(rejection.status){case 401:Authentication.user=null,$location.path("signin");break;case 403:}return $q.reject(rejection)}}}])}]),angular.module("users").config(["$stateProvider",function($stateProvider){$stateProvider.state("settings",{"abstract":!0,url:"/settings",templateUrl:"modules/users/views/settings/settings.client.view.html",data:{roles:["user","admin"]}}).state("settings.profile",{url:"/profile",templateUrl:"modules/users/views/settings/edit-profile.client.view.html"}).state("settings.password",{url:"/password",templateUrl:"modules/users/views/settings/change-password.client.view.html"}).state("settings.accounts",{url:"/accounts",templateUrl:"modules/users/views/settings/manage-social-accounts.client.view.html"}).state("settings.picture",{url:"/picture",templateUrl:"modules/users/views/settings/change-profile-picture.client.view.html"}).state("authentication",{"abstract":!0,url:"/authentication",templateUrl:"modules/users/views/authentication/authentication.client.view.html"}).state("authentication.signup",{url:"/signup",templateUrl:"modules/users/views/authentication/signup.client.view.html"}).state("authentication.signin",{url:"/signin?err",templateUrl:"modules/users/views/authentication/signin.client.view.html"}).state("password",{"abstract":!0,url:"/password",template:"<ui-view/>"}).state("password.forgot",{url:"/forgot",templateUrl:"modules/users/views/password/forgot-password.client.view.html"}).state("password.reset",{"abstract":!0,url:"/reset",template:"<ui-view/>"}).state("password.reset.invalid",{url:"/invalid",templateUrl:"modules/users/views/password/reset-password-invalid.client.view.html"}).state("password.reset.success",{url:"/success",templateUrl:"modules/users/views/password/reset-password-success.client.view.html"}).state("password.reset.form",{url:"/:token",templateUrl:"modules/users/views/password/reset-password.client.view.html"})}]),angular.module("users.admin").controller("UserListController",["$scope","$filter","Admin",function($scope,$filter,Admin){Admin.query(function(data){$scope.users=data,$scope.buildPager()}),$scope.buildPager=function(){$scope.pagedItems=[],$scope.itemsPerPage=15,$scope.currentPage=1,$scope.figureOutItemsToDisplay()},$scope.figureOutItemsToDisplay=function(){$scope.filteredItems=$filter("filter")($scope.users,{$:$scope.search}),$scope.filterLength=$scope.filteredItems.length;var begin=($scope.currentPage-1)*$scope.itemsPerPage,end=begin+$scope.itemsPerPage;$scope.pagedItems=$scope.filteredItems.slice(begin,end)},$scope.pageChanged=function(){$scope.figureOutItemsToDisplay()}}]),angular.module("users.admin").controller("UserController",["$scope","$state","Authentication","userResolve",function($scope,$state,Authentication,userResolve){$scope.authentication=Authentication,$scope.user=userResolve,$scope.remove=function(user){confirm("Are you sure you want to delete this user?")&&(user?(user.$remove(),$scope.users.splice($scope.users.indexOf(user),1)):$scope.user.$remove(function(){$state.go("admin.users")}))},$scope.update=function(){var user=$scope.user;user.$update(function(){$state.go("admin.user",{userId:user._id})},function(errorResponse){$scope.error=errorResponse.data.message})}}]),angular.module("users").controller("AuthenticationController",["$scope","$state","$http","$location","$window","Authentication",function($scope,$state,$http,$location,$window,Authentication){$scope.authentication=Authentication,$scope.error=$location.search().err,$scope.authentication.user&&$location.path("/events/main"),$scope.signup=function(){$http.post("/api/auth/signup",$scope.credentials).success(function(response){$scope.authentication.user=response,$state.go($state.previous.state.name||"events.main",$state.previous.params)}).error(function(response){$scope.error=response.message})},$scope.signin=function(){$http.post("/api/auth/signin",$scope.credentials).success(function(response){$scope.authentication.user=response,$state.go($state.previous.state.name||"events.main",$state.previous.params)}).error(function(response){$scope.error=response.message})},$scope.callOauthProvider=function(url){var redirect_to;$state.previous&&(redirect_to=$state.previous.href),$window.location.href=url+(redirect_to?"?redirect_to="+encodeURIComponent(redirect_to):"");
}}]),angular.module("users").controller("PasswordController",["$scope","$stateParams","$http","$location","Authentication",function($scope,$stateParams,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.askForPasswordReset=function(){$scope.success=$scope.error=null,$http.post("/api/auth/forgot",$scope.credentials).success(function(response){$scope.credentials=null,$scope.success=response.message}).error(function(response){$scope.credentials=null,$scope.error=response.message})},$scope.resetUserPassword=function(){$scope.success=$scope.error=null,$http.post("/api/auth/reset/"+$stateParams.token,$scope.passwordDetails).success(function(response){$scope.passwordDetails=null,Authentication.user=response,$location.path("/password/reset/success")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("ChangePasswordController",["$scope","$http","Authentication",function($scope,$http,Authentication){$scope.user=Authentication.user,$scope.changeUserPassword=function(){$scope.success=$scope.error=null,$http.post("/api/users/password",$scope.passwordDetails).success(function(response){$scope.success=!0,$scope.passwordDetails=null}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("ChangeProfilePictureController",["$scope","$timeout","$window","Authentication","FileUploader",function($scope,$timeout,$window,Authentication,FileUploader){$scope.user=Authentication.user,$scope.imageURL=$scope.user.profileImageURL,$scope.uploader=new FileUploader({url:"api/users/picture",alias:"newProfilePicture",inMemory:!0}),$scope.arrayBufferToBase64=function(buffer){for(var binary="",bytes=new Uint8Array(buffer),len=bytes.byteLength,i=0;len>i;i++)binary+=String.fromCharCode(bytes[i]);return window.btoa(binary)},$scope.uploader.filters.push({name:"imageFilter",fn:function(item,options){var type="|"+item.type.slice(item.type.lastIndexOf("/")+1)+"|";return-1!=="|jpg|png|jpeg|bmp|gif|".indexOf(type)}}),$scope.uploader.onAfterAddingFile=function(fileItem){if($window.FileReader){var fileReader=new FileReader;fileReader.readAsDataURL(fileItem._file),fileReader.onload=function(fileReaderEvent){$timeout(function(){$scope.imageURL=fileReaderEvent.target.result},0)}}},$scope.uploader.onSuccessItem=function(fileItem,response,status,headers){$scope.success=!0,$scope.user=Authentication.user=response,$scope.cancelUpload()},$scope.uploader.onErrorItem=function(fileItem,response,status,headers){$scope.cancelUpload(),$scope.error=response.message},$scope.uploadProfilePicture=function(){$scope.success=$scope.error=null,$scope.uploader.uploadAll()},$scope.cancelUpload=function(){$scope.uploader.clearQueue(),$scope.imageURL=$scope.user.profileImageURL}}]),angular.module("users").controller("EditProfileController",["$scope","$http","$location","Users","Authentication",function($scope,$http,$location,Users,Authentication){$scope.user=Authentication.user,$scope.updateUserProfile=function(isValid){if(isValid){$scope.success=$scope.error=null;var user=new Users($scope.user);user.$update(function(response){$scope.success=!0,Authentication.user=response},function(response){$scope.error=response.data.message})}else $scope.submitted=!0}}]),angular.module("users").controller("SocialAccountsController",["$scope","$http","Authentication",function($scope,$http,Authentication){$scope.user=Authentication.user,$scope.hasConnectedAdditionalSocialAccounts=function(provider){for(var i in $scope.user.additionalProvidersData)return!0;return!1},$scope.isConnectedSocialAccount=function(provider){return $scope.user.provider===provider||$scope.user.additionalProvidersData&&$scope.user.additionalProvidersData[provider]},$scope.removeUserSocialAccount=function(provider){$scope.success=$scope.error=null,$http["delete"]("/api/users/accounts",{params:{provider:provider}}).success(function(response){$scope.success=!0,$scope.user=Authentication.user=response}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("SettingsController",["$scope","Authentication",function($scope,Authentication){$scope.user=Authentication.user}]),angular.module("users").factory("Authentication",["$window",function($window){var auth={user:$window.user};return auth}]),angular.module("users").factory("Users",["$resource",function($resource){return $resource("api/users",{},{update:{method:"PUT"}})}]),angular.module("users.admin").factory("Admin",["$resource",function($resource){return $resource("api/users/:userId",{userId:"@_id"},{update:{method:"PUT"}})}]);